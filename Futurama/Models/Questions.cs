// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var questions = Questions.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ProblemDetailsApiDemo.Futurama.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Questions
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("question")]
        public string Question { get; set; }

        [JsonProperty("possibleAnswers")]
        public string[] PossibleAnswers { get; set; }

        [JsonProperty("correctAnswer")]
        public CorrectAnswer CorrectAnswer { get; set; }
    }

    public partial struct CorrectAnswer
    {
        public long? Integer;
        public string String;

        public static implicit operator CorrectAnswer(long Integer) => new CorrectAnswer { Integer = Integer };
        public static implicit operator CorrectAnswer(string String) => new CorrectAnswer { String = String };
    }

    public partial class Questions
    {
        public static Questions[] FromJson(string json) => JsonConvert.DeserializeObject<Questions[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Questions[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CorrectAnswerConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CorrectAnswerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CorrectAnswer) || t == typeof(CorrectAnswer?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new CorrectAnswer { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new CorrectAnswer { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type CorrectAnswer");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CorrectAnswer)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type CorrectAnswer");
        }

        public static readonly CorrectAnswerConverter Singleton = new CorrectAnswerConverter();
    }
}
